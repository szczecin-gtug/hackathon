package pl.gtug.szczecin.hackathon.database.generated;

import pl.gtug.szczecin.hackathon.database.generated.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TODO_ITEM.
 */
public class TodoItem {

    private Long id;
    /** Not-null value. */
    private String description;
    private boolean is_done;
    private Long locationId;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private TodoItemDao myDao;

    private Location location;
    private Long location__resolvedKey;


    public TodoItem() {
    }

    public TodoItem(Long id) {
        this.id = id;
    }

    public TodoItem(Long id, String description, boolean is_done, Long locationId) {
        this.id = id;
        this.description = description;
        this.is_done = is_done;
        this.locationId = locationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTodoItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(String description) {
        this.description = description;
    }

    public boolean getIs_done() {
        return is_done;
    }

    public void setIs_done(boolean is_done) {
        this.is_done = is_done;
    }

    public Long getLocationId() {
        return locationId;
    }

    public void setLocationId(Long locationId) {
        this.locationId = locationId;
    }

    /** To-one relationship, resolved on first access. */
    public Location getLocation() {
        if (location__resolvedKey == null || !location__resolvedKey.equals(locationId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationDao targetDao = daoSession.getLocationDao();
            location = targetDao.load(locationId);
            location__resolvedKey = locationId;
        }
        return location;
    }

    public void setLocation(Location location) {
        this.location = location;
        locationId = location == null ? null : location.getId();
        location__resolvedKey = locationId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
